<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on COMP52315 – Performance Engineering</title><link>https://teaching.wence.uk/comp52315/notes/</link><description>Recent content in Notes on COMP52315 – Performance Engineering</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://teaching.wence.uk/comp52315/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://teaching.wence.uk/comp52315/notes/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp52315/notes/introduction/</guid><description>Resources in stored program computers # To understand the performance of a code, we need to have an understanding of what hardware resources it uses, and what resources the hardware provides.
All modern general purpose hardware uses a von Neumann architecture. That is, there is a memory which stores both the program code to be executed and the data for the program. This is attached to a processor (CPU) which contains execution units for executing individual instructions in the program code along with further parts of logical control and load/store of data.</description></item><item><title>The memory hierarchy</title><link>https://teaching.wence.uk/comp52315/notes/memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp52315/notes/memory/</guid><description>An overview of memory hierarchies # Reduction benchmark # In exercise 1 you looked at the performance of a vectorised and non-vectorised version of a very simple loop computing the sum of an array of floating point numbers.
In doing so, you produced a plot of the performance (in terms of floating point throughput) as a function of array size. You should have observed something similar to that shown here.</description></item><item><title>Performance models: roofline</title><link>https://teaching.wence.uk/comp52315/notes/roofline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp52315/notes/roofline/</guid><description>Models of performance # If our goal is to improve the performance of some code we should take a scientific approach. We must first define what we mean by performance. So far, we&amp;rsquo;ve talked about floating point throughput (GFlops/s) or memory bandwidth (GBytes/s). However, these are really secondary characteristics to the primary metric of performance of a code:
How long do I have to wait until I get the answer?</description></item><item><title>Measurement and profiling</title><link>https://teaching.wence.uk/comp52315/notes/measurements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp52315/notes/measurements/</guid><description>Performance measurements # So far, we&amp;rsquo;ve seen the roofline model, and observed that for floating point code, it allows us to get a high-level view of what coarse step we should be taking to improve the performance of our algorithm.
Now suppose that we do a roofline analysis for our code, we observe that it should be limited by floating point throughput, but we are nowhere near the roof.</description></item><item><title>Cache blocking/tiling</title><link>https://teaching.wence.uk/comp52315/notes/tiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp52315/notes/tiling/</guid><description>Achieving reasonable performance for loopy code # Many of the algorithms we encounter in scientific computing have quite &amp;ldquo;simple&amp;rdquo; data access patterns. Numerical code often has multiple nested loops with regular array indexing. This is actually a reason the roofline model is so successful: its optimistic assumptions are not too optimistic.
Despite this simplicity, on hardware with memory caches, we still need to do some work to turn this &amp;ldquo;simple&amp;rdquo; code into something that runs with reasonable performance.</description></item></channel></rss>